var t,e,s;!function(t){t._compose=function(t=HTMLElement,...e){return e.reduce(((t,e)=>e(t)),t)},t._css=function(t,...e){return t.reduce(((t,s,n)=>t+s+(e[n]||"")),"")},t._html=function(t,...e){return new Function("return `"+t.reduce(((t,s,n)=>t+s+(e[n]||"")),"")+"`")()},t._style=function(t){const e=document.createElement("style");return e.textContent=t,e},t._template=function(t){const e=document.createElement("template");return e.innerHTML=t,e},t._uniqId=function(){return Math.random().toString(36).substr(2,9)}}(t||(t={})),function(e){function s(t){return class extends HTMLElement{constructor(...t){var e,s;super(...t),this.handleScroll=this.handleScroll.bind(this),this.isScrolling=!1,null===(e=this.shadowRoot)||void 0===e||e.addEventListener("scroll",this.handleScroll),this.attachShadow({mode:"open"}),null===(s=this.shadowRoot)||void 0===s||s.appendChild(document.createElement("slot"))}static get observedAttributes(){return["fx-data-speed","fx-data-direction","fx-data-offset"]}connectedCallback(){this.handleScroll(),window.addEventListener("scroll",this.handleScroll)}disconnectedCallback(){window.removeEventListener("scroll",this.handleScroll)}attributeChangedCallback(t,e,s){e!==s&&this.handleScroll()}handleScroll(){this.isScrolling||window.requestAnimationFrame((()=>{this.style.transform=`translateY(${window.scrollY*Number(this.speed)}px)`,this.isScrolling=!1})),this.isScrolling=!0}get speed(){return Number(this.getAttribute("fx-data-speed"))||.5}get direction(){return this.getAttribute("fx-data-direction")||"vertical"}get offset(){return this.getAttribute("fx-data-offset")||0}}}e.FxParallaxMixin=s,e.FxParallaxElement=t._compose(HTMLElement,s),customElements.define("fx-parallax",e.FxParallaxElement)}(e||(e={})),function(e){function n(t){return class extends HTMLElement{constructor(...t){super(...t),this.handleMouseEnter=this.handleMouseEnter.bind(this),this.handleMouseLeave=this.handleMouseLeave.bind(this)}connectedCallback(){this.tooltip=document.createElement("div"),this.tooltip.className="fx-data-tooltip",this.tooltip.textContent=this.getAttribute("fx-data-tooltip"),this.tooltip.style.position="absolute",this.tooltip.style.zIndex="1",this.tooltip.style.display="none",this.appendChild(this.tooltip),this.addEventListener("mouseenter",this.handleMouseEnter),this.addEventListener("mouseleave",this.handleMouseLeave)}disconnectedCallback(){this.removeChild(this.tooltip),this.removeEventListener("mouseenter",this.handleMouseEnter),this.removeEventListener("mouseleave",this.handleMouseLeave)}handleMouseEnter(){this.tooltip.style.display="block"}handleMouseLeave(){this.tooltip.style.display="none"}static get observedAttributes(){return["fx-data-tooltip"]}}}e.FxTooltipMixin=n,e.FxTooltipElement=t._compose(HTMLElement,n),customElements.define("fx-parallax",e.FxTooltipElement),customElements.define("fx-tooltip",s)}(s||(s={}));class n extends HTMLElement{constructor(){super(),this.observers=new Map,this.observeAttributes=this.observeAttributes.bind(this)}connectedCallback(){this.observeAttributes()}observe(t,e,s){const n=new MutationObserver(s);n.observe(t,e),this.observers.set(t,n)}unobserve(t){const e=this.observers.get(t);e&&(e.disconnect(),this.observers.delete(t))}disconnect(){this.observers.forEach((t=>t.disconnect()))}getRecords(){return Array.from(this.observers.values()).flatMap((t=>t.takeRecords()))}observeAttributes(){const t=new MutationObserver((t=>{t.forEach((t=>{"attributes"===t.type&&this.attributeChangedCallback(t.attributeName,t.oldValue,t.target.nodeValue)}))}));null!==this.shadowRoot&&t.observe(this.shadowRoot,{attributes:!0})}attributeChangedCallback(t,e,s){console.log("attributeChangedCallback",t,e,s)}}export{t as Fx,n as FxObserver};
//# sourceMappingURL=fx-components.js.map
